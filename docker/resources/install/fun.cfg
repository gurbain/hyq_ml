#!/bin/bash

SERVER=schaap

# List of usefull colors
COLOR_RESET="\033[0m"
COLOR_INFO="\033[0;32m"
COLOR_ITEM="\033[0;34m"
COLOR_QUES="\033[0;35m"
COLOR_WARN="\033[0;33m"
COLOR_BOLD="\033[1m"
COLOR_UNDE="\033[4m"

function remove_string()
{
	if grep -Fwq "$1" $2
	then
		echo -e "${COLOR_INFO}Remove string: $1 from file $2 ${COLOR_RESET}"
		sudo echo "$(grep -Fv "$1" $2)" | sudo tee $2
		return 1
	else
		return 0
	fi		
}

function dls_ros_repo_setting(){
	if grep -q "/$SERVER/" /etc/ros/rosdep/sources.list.d/20-default.list
	then
    echo -e "${COLOR_INFO}ROS repository already in /etc/ros/rosdep/sources.list.d/20-default.list... ${COLOR_RESET}"
	else
		echo -e "${COLOR_INFO}Inserting $SERVER in /etc/ros/rosdep/sources.list.d/20-default.list... ${COLOR_RESET}"
		echo "# Local DLS ROS repo" | sudo tee --append /etc/ros/rosdep/sources.list.d/20-default.list
		echo "yaml http://$SERVER/dls.yaml" | sudo tee --append /etc/ros/rosdep/sources.list.d/20-default.list
	fi
}

function dls_ppa_setting(){
	if remove_string 'deb [trusted=yes] http://$SERVER/debs/ amd64/' /etc/apt/sources.list; then
		echo -e "${COLOR_INFO}Remove old apt server.${COLOR_RESET}"
	fi
	if grep -q "/$SERVER/" /etc/apt/sources.list
	then
    echo -e "${COLOR_INFO}Apt repository already in /etc/apt/sources.list... ${COLOR_RESET}"
 	# Add all repositories
	else
		echo -e "${COLOR_INFO}Inserting $SERVER in /etc/apt/sources.list... ${COLOR_RESET}"
		echo "# Local DLS repo" | sudo tee --append /etc/apt/sources.list
		echo "deb [trusted=yes] http://$SERVER/debs/ stable/" | sudo tee --append /etc/apt/sources.list
		echo "deb [trusted=yes] http://$SERVER/debs/ latest/" | sudo tee --append /etc/apt/sources.list
	fi

	# Pinning 
	if [ ! -f "/etc/apt/preferences" ];
	then
		sudo touch /etc/apt/preferences
	else
		remove_string 'Package: *' /etc/apt/preferences
                remove_string 'Pin: origin "$SERVER"' /etc/apt/preferences
		remove_string 'Pin-Priority: 999' /etc/apt/preferences
	fi
	
	# Set stable as Default-Relase for the pkgs
	if [ ! -f "/etc/apt/apt.conf" ];
	then
		sudo touch /etc/apt/apt.conf
	fi

	if grep -q "APT::Default-Release" /etc/apt/apt.conf
	then
		echo -e "${COLOR_INFO}Suite stable already pointed as Default-Release... ${COLOR_RESET}"
	else
		echo -e "${COLOR_INFO}Set stable suite as Default-Release... ${COLOR_RESET}"
		echo "APT::Default-Release \"stable\";" | sudo tee --append /etc/apt/apt.conf
	fi
	#NOTE: To completely remove the apt cache rm /var/lib/apt/lists/* 	
}

# check for specific package
# Return values:
#  0 - package is installed
#  1 - package is not installed, it is available in package repository
#  2 - package is not installed, it is not available in package repository
function check_for_package(){
  if dpkg-query -s "$1" 1>/dev/null 2>&1; then
    return 0   # package is installed
  else
    if apt-cache show "$1" 1>/dev/null 2>&1; then
      return 1 # package is not installed, it is available in package repository
    else
      return 2 # package is not installed, it is not available in package repository
    fi
  fi
}

function check_pkg_remove(){
  if check_for_package $1; then
    echo -e "${COLOR_INFO}Package $1 is already installed, reinstall?.${COLOR_RESET}"
    select yn in "Yes" "No"; do
	    case $yn in
		Yes ) sudo apt-get remove $1; INSTALL=1; break;;
		No ) INSTALL=0; break;;
	    esac
    done
  else
    #By default, always install 
    INSTALL=1
  fi
}

function parse_yaml(){
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, $3);
        }
    }' | sed 's/_=/+=/g'
}

function create_yaml_variables(){
    local yaml_file="$1"
    eval "$(parse_yaml "$yaml_file")"
}

